/* 
    nodeJS的事件轮询：
        nodeJS中异步操作是由libuv处理的，主线程遇到异步代码时不需要等待，可以继续去处理其它事情
        1.异步代码会被放入事件轮询队列中，这样就要知道nodeJS是如何轮询回调队列的
        2.异步代码又分为微任务代码和宏任务代码，事件轮询队列中就是会有微任务代码和宏任务代码两种，微任务代码先于宏任务代码执行
        3.这就要知道哪些是微任务代码，哪些是宏任务代码
        4.在微任务代码和宏任务代码中也会有不同的代码，这就要知道在微任务代码中有哪些，它们的先后顺序是怎样的；宏任务代码中有哪些，它们的先后顺序又是怎样的
*/

/* 
    宏任务中代码有以下几个阶段
1.timer阶段：处理setTimeout和setInterval中的回调函数
2.pending阶段：处理系统级别操作的回调函数（可以忽略）
3.idle阶段:处理nodejs内部的回调函数，此阶段是仅供nodejs内部操作调用，忽略
4.poll阶段：处理I/O或者网络请求等异步操作的回调函数
    - 当进入到这个阶段时不为空(有相应的回调函数)，那么会正常执行完回调函数，然后继续执行下个阶段
    - 当为空(没有相应的回调函数)，会一直等待知道poll中有回调函数
        - 但是当timer阶段的计时器到期了，或check阶段有setImmediate等待执行的时候，会直接跳入check阶段
5.check阶段：setImmediate的回调函数
6.close阶段：执行一些关闭函数

*/

/* 
    微任务
process.nextTick
Promise的then/catch/finally
queueMicrotask
*/